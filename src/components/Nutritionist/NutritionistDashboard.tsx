import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Users, UserPlus, Calendar, BarChart3, CheckCircle, XCircle, Clock } from 'lucide-react';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { NutritionistPlanCreator } from '../MealPlan/NutritionistPlanCreator';
import { PatientsList } from './PatientsList';
import { InvitationManager } from './InvitationManager';

interface Patient {
  id: string;
  user_id: string;
  full_name: string;
  email: string;
  username: string;
  avatar_url?: string;
  created_at: string;
}

interface Invitation {
  id: string;
  patient_username: string;
  invitation_code: string;
  status: string;
  created_at: string;
  expires_at: string;
}

export function NutritionistDashboard() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [patients, setPatients] = useState<Patient[]>([]);
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [selectedPatientId, setSelectedPatientId] = useState<string | null>(null);
  const [newPatientUsername, setNewPatientUsername] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchPatients();
    fetchInvitations();
  }, []);

  const fetchPatients = async () => {
    try {
      const { data: relationships, error: relationshipError } = await supabase
        .from('nutritionist_patients')
        .select(`
          patient_id,
          profiles!nutritionist_patients_patient_id_fkey (
            id,
            user_id,
            full_name,
            email,
            username,
            avatar_url,
            created_at
          )
        `)
        .eq('nutritionist_id', user?.id);

      if (relationshipError) throw relationshipError;

      const patientsData = relationships?.map(rel => rel.profiles).filter(Boolean) || [];
      setPatients(patientsData as Patient[]);
    } catch (error) {
      console.error('Error fetching patients:', error);
      toast({
        title: "Erro",
        description: "Erro ao carregar pacientes",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const fetchInvitations = async () => {
    try {
      const { data, error } = await supabase
        .from('patient_invitations')
        .select('*')
        .eq('nutritionist_id', user?.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setInvitations(data || []);
    } catch (error) {
      console.error('Error fetching invitations:', error);
    }
  };

  const sendInvitation = async () => {
    if (!newPatientUsername.trim()) {
      toast({
        title: "Erro",
        description: "Digite o nome de usuário do paciente",
        variant: "destructive",
      });
      return;
    }

    try {
      // Check if user exists
      const { data: userExists, error: userError } = await supabase
        .from('profiles')
        .select('username, user_type')
        .eq('username', newPatientUsername.trim())
        .eq('user_type', 'patient')
        .single();

      if (userError || !userExists) {
        toast({
          title: "Erro",
          description: "Usuário não encontrado ou não é um paciente",
          variant: "destructive",
        });
        return;
      }

      // Check if invitation already exists
      const { data: existingInvitation } = await supabase
        .from('patient_invitations')
        .select('id')
        .eq('nutritionist_id', user?.id)
        .eq('patient_username', newPatientUsername.trim())
        .eq('status', 'pending')
        .single();

      if (existingInvitation) {
        toast({
          title: "Erro",
          description: "Convite já enviado para este paciente",
          variant: "destructive",
        });
        return;
      }

      // Send invitation
      const { error } = await supabase
        .from('patient_invitations')
        .insert({
          nutritionist_id: user?.id,
          patient_username: newPatientUsername.trim(),
          invitation_code: '' // Will be auto-generated by trigger
        });

      if (error) throw error;

      toast({
        title: "Sucesso",
        description: "Convite enviado com sucesso!",
      });
      setNewPatientUsername('');
      fetchInvitations();
    } catch (error) {
      console.error('Error sending invitation:', error);
      toast({
        title: "Erro",
        description: "Erro ao enviar convite",
        variant: "destructive",
      });
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'pending':
        return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200"><Clock className="w-3 h-3 mr-1" />Pendente</Badge>;
      case 'accepted':
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200"><CheckCircle className="w-3 h-3 mr-1" />Aceito</Badge>;
      case 'rejected':
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200"><XCircle className="w-3 h-3 mr-1" />Rejeitado</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen">Carregando...</div>;
  }

  if (selectedPatientId) {
    const selectedPatient = patients.find(p => p.user_id === selectedPatientId);
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/10">
        <div className="container mx-auto p-4">
          <div className="flex items-center gap-4 mb-6">
            <Button 
              variant="outline" 
              onClick={() => setSelectedPatientId(null)}
              className="mb-4"
            >
              ← Voltar aos Pacientes
            </Button>
            <h1 className="text-2xl font-bold">Acompanhamento - {selectedPatient?.full_name}</h1>
          </div>
          
          <div className="space-y-6">
            <div className="text-center">
              <h2 className="text-xl font-semibold mb-2">Acompanhamento - {selectedPatient?.full_name}</h2>
              <p className="text-muted-foreground">Esta funcionalidade está em desenvolvimento</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/10">
      <div className="container mx-auto p-4">
        <div className="flex items-center gap-4 mb-6">
          <Users className="w-8 h-8 text-primary" />
          <h1 className="text-3xl font-bold">Painel do Nutricionista</h1>
        </div>

        <Tabs defaultValue="overview" className="w-full">
          <TabsList className="grid w-full grid-cols-5 mb-6">
            <TabsTrigger value="overview">Visão Geral</TabsTrigger>
            <TabsTrigger value="patients">Pacientes</TabsTrigger>
            <TabsTrigger value="plans">Criar Planos</TabsTrigger>
            <TabsTrigger value="invitations">Convites</TabsTrigger>
            <TabsTrigger value="reports">Relatórios</TabsTrigger>
          </TabsList>

          <TabsContent value="overview">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total de Pacientes</CardTitle>
                  <Users className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{patients.length}</div>
                  <p className="text-xs text-muted-foreground">
                    {invitations.filter(i => i.status === 'pending').length} convites pendentes
                  </p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Convites Ativos</CardTitle>
                  <UserPlus className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{invitations.filter(i => i.status === 'pending').length}</div>
                  <p className="text-xs text-muted-foreground">
                    {invitations.filter(i => i.status === 'accepted').length} aceitos este mês
                  </p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Planos Ativos</CardTitle>
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">0</div>
                  <p className="text-xs text-muted-foreground">Em desenvolvimento</p>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Taxa de Adesão</CardTitle>
                  <BarChart3 className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">85%</div>
                  <p className="text-xs text-muted-foreground">+2% em relação ao mês passado</p>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="patients">
            <PatientsList patients={patients} />
          </TabsContent>

          <TabsContent value="plans">
            <NutritionistPlanCreator />
          </TabsContent>

          <TabsContent value="invitations">
            <InvitationManager 
              invitations={invitations}
              onSendInvitation={sendInvitation}
              newPatientUsername={newPatientUsername}
              setNewPatientUsername={setNewPatientUsername}
            />
          </TabsContent>

          <TabsContent value="reports">
            <Card>
              <CardHeader>
                <CardTitle>Relatórios e Análises</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">
                  Esta seção está em desenvolvimento. Em breve você poderá visualizar:
                </p>
                <ul className="list-disc list-inside mt-4 space-y-2 text-sm text-muted-foreground">
                  <li>Relatórios de adesão aos planos alimentares</li>
                  <li>Estatísticas de validação de refeições</li>
                  <li>Progresso individual dos pacientes</li>
                  <li>Análises comparativas</li>
                </ul>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}