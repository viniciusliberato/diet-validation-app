import { useState, useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';
import { UserPlus, Users, Clock, CheckCircle, XCircle } from 'lucide-react';
import { DashboardStats } from '@/components/Dashboard/DashboardStats';
import { ProgressCharts } from '@/components/Insights/ProgressCharts';
import { UserProfile } from '@/components/Profile/UserProfile';

interface Patient {
  id: string;
  user_id: string;
  full_name: string;
  email: string;
  username: string;
  avatar_url?: string;
  created_at: string;
}

interface Invitation {
  id: string;
  patient_username: string;
  invitation_code: string;
  status: string;
  created_at: string;
  expires_at: string;
}

export function NutritionistDashboard() {
  const { user } = useAuth();
  const [patients, setPatients] = useState<Patient[]>([]);
  const [invitations, setInvitations] = useState<Invitation[]>([]);
  const [selectedPatientId, setSelectedPatientId] = useState<string | null>(null);
  const [newPatientUsername, setNewPatientUsername] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchPatients();
    fetchInvitations();
  }, []);

  const fetchPatients = async () => {
    try {
      const { data: relationships, error: relationshipError } = await supabase
        .from('nutritionist_patients')
        .select(`
          patient_id,
          profiles!nutritionist_patients_patient_id_fkey (
            id,
            user_id,
            full_name,
            email,
            username,
            avatar_url,
            created_at
          )
        `)
        .eq('nutritionist_id', user?.id);

      if (relationshipError) throw relationshipError;

      const patientsData = relationships?.map(rel => rel.profiles).filter(Boolean) || [];
      setPatients(patientsData as Patient[]);
    } catch (error) {
      console.error('Error fetching patients:', error);
      toast.error('Erro ao carregar pacientes');
    } finally {
      setLoading(false);
    }
  };

  const fetchInvitations = async () => {
    try {
      const { data, error } = await supabase
        .from('patient_invitations')
        .select('*')
        .eq('nutritionist_id', user?.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setInvitations(data || []);
    } catch (error) {
      console.error('Error fetching invitations:', error);
    }
  };

  const sendInvitation = async () => {
    if (!newPatientUsername.trim()) {
      toast.error('Digite o nome de usuário do paciente');
      return;
    }

    try {
      // Check if user exists
      const { data: userExists, error: userError } = await supabase
        .from('profiles')
        .select('username, user_type')
        .eq('username', newPatientUsername.trim())
        .eq('user_type', 'patient')
        .single();

      if (userError || !userExists) {
        toast.error('Usuário não encontrado ou não é um paciente');
        return;
      }

      // Check if invitation already exists
      const { data: existingInvitation } = await supabase
        .from('patient_invitations')
        .select('id')
        .eq('nutritionist_id', user?.id)
        .eq('patient_username', newPatientUsername.trim())
        .eq('status', 'pending')
        .single();

      if (existingInvitation) {
        toast.error('Convite já enviado para este paciente');
        return;
      }

      // Send invitation
      const { error } = await supabase
        .from('patient_invitations')
        .insert({
          nutritionist_id: user?.id,
          patient_username: newPatientUsername.trim(),
          invitation_code: '' // Will be auto-generated by trigger
        });

      if (error) throw error;

      toast.success('Convite enviado com sucesso!');
      setNewPatientUsername('');
      fetchInvitations();
    } catch (error) {
      console.error('Error sending invitation:', error);
      toast.error('Erro ao enviar convite');
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'pending':
        return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200"><Clock className="w-3 h-3 mr-1" />Pendente</Badge>;
      case 'accepted':
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200"><CheckCircle className="w-3 h-3 mr-1" />Aceito</Badge>;
      case 'rejected':
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200"><XCircle className="w-3 h-3 mr-1" />Rejeitado</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen">Carregando...</div>;
  }

  if (selectedPatientId) {
    const selectedPatient = patients.find(p => p.user_id === selectedPatientId);
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/10">
        <div className="container mx-auto p-4">
          <div className="flex items-center gap-4 mb-6">
            <Button 
              variant="outline" 
              onClick={() => setSelectedPatientId(null)}
              className="mb-4"
            >
              ← Voltar aos Pacientes
            </Button>
            <h1 className="text-2xl font-bold">Acompanhamento - {selectedPatient?.full_name}</h1>
          </div>
          
          <div className="space-y-6">
            <UserProfile />
            <DashboardStats />
            <ProgressCharts />
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/10">
      <div className="container mx-auto p-4">
        <div className="flex items-center gap-4 mb-6">
          <Users className="w-8 h-8 text-primary" />
          <h1 className="text-3xl font-bold">Painel do Nutricionista</h1>
        </div>

        <Tabs defaultValue="patients" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="patients">Meus Pacientes ({patients.length})</TabsTrigger>
            <TabsTrigger value="invitations">Convites ({invitations.length})</TabsTrigger>
          </TabsList>

          <TabsContent value="patients" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <UserPlus className="w-5 h-5" />
                  Convidar Novo Paciente
                </CardTitle>
                <CardDescription>
                  Digite o nome de usuário do paciente para enviar um convite
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex gap-2">
                  <div className="flex-1">
                    <Label htmlFor="username">Nome de usuário do paciente</Label>
                    <Input
                      id="username"
                      placeholder="Ex: joao123"
                      value={newPatientUsername}
                      onChange={(e) => setNewPatientUsername(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && sendInvitation()}
                    />
                  </div>
                  <Button onClick={sendInvitation} className="mt-6">
                    Enviar Convite
                  </Button>
                </div>
              </CardContent>
            </Card>

            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {patients.map((patient) => (
                <Card key={patient.id} className="cursor-pointer hover:shadow-lg transition-all">
                  <CardHeader>
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full bg-gradient-to-r from-primary to-primary-foreground flex items-center justify-center text-white font-semibold">
                        {patient.full_name?.charAt(0).toUpperCase()}
                      </div>
                      <div>
                        <CardTitle className="text-lg">{patient.full_name}</CardTitle>
                        <CardDescription>@{patient.username}</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <p className="text-sm text-muted-foreground">{patient.email}</p>
                      <p className="text-xs text-muted-foreground">
                        Paciente desde {new Date(patient.created_at).toLocaleDateString('pt-BR')}
                      </p>
                      <Button 
                        className="w-full mt-4" 
                        onClick={() => setSelectedPatientId(patient.user_id)}
                      >
                        Ver Detalhes
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {patients.length === 0 && (
              <Card>
                <CardContent className="text-center py-8">
                  <Users className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">Nenhum paciente ainda</p>
                  <p className="text-sm text-muted-foreground">Envie convites para começar a acompanhar seus pacientes</p>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="invitations" className="space-y-4">
            <div className="space-y-4">
              {invitations.map((invitation) => (
                <Card key={invitation.id}>
                  <CardContent className="pt-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-semibold">@{invitation.patient_username}</h3>
                        <p className="text-sm text-muted-foreground">
                          Código: <code className="bg-muted px-2 py-1 rounded">{invitation.invitation_code}</code>
                        </p>
                        <p className="text-xs text-muted-foreground">
                          Enviado em {new Date(invitation.created_at).toLocaleDateString('pt-BR')} • 
                          Expira em {new Date(invitation.expires_at).toLocaleDateString('pt-BR')}
                        </p>
                      </div>
                      <div className="text-right">
                        {getStatusBadge(invitation.status)}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {invitations.length === 0 && (
              <Card>
                <CardContent className="text-center py-8">
                  <Clock className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">Nenhum convite enviado</p>
                </CardContent>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}